<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
     xmlns:creativeCommons="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html"
     xmlns:cc="http://creativecommons.org/ns#"
     xmlns:xapRights="http://ns.adobe.com/xap/1.0/rights/">
  <channel>
    <title>Benchmark on @AlTobey Writes </title>
    <link>https://tobert.github.io/tags/benchmark/index.xml</link>
    <language>en-us</language>
    <author>Albert P Tobey</author>
	<pubDate>2014-04-09 00:00:00 &#43;0000 UTC</pubDate>
	<lastBuildDate>2014-04-09 00:00:00 &#43;0000 UTC</lastBuildDate>
	<generator>Hugo</generator>
    
    <item>
      <title>Fio Output Explained</title>
      <link>https://tobert.github.io/post/fio-output-explained</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 UTC</pubDate>
      <author>Albert P Tobey</author>
      <guid>https://tobert.github.io/post/fio-output-explained</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;NOTE: THIS IS AN UNPUBLISHED DRAFT&lt;/h1&gt;

&lt;p&gt;Previously, I blogged about setting up my benchmarking machine. Now that it&amp;rsquo;s up and running, I&amp;rsquo;ve started exploring the fio benchmarking tool. In doing so, I&amp;rsquo;ve had to learn all of the abbreviations and terms that fio uses for the kinds of latency it measures.&lt;/p&gt;

&lt;p&gt;read : io=10240MB, bw=63317KB/s, iops=15829, runt=165607msec&lt;/p&gt;

&lt;p&gt;The first line is pretty easy to read. fio did a total of 10GB of IO at 63.317MB/s for a total of 15829 IOPS (at the default 4k block size), and ran for 2 minutes and 45 seconds.&lt;/p&gt;

&lt;p&gt;The first latency metric you&amp;rsquo;ll see is the &amp;lsquo;slat&amp;rsquo; or submission latency. It is pretty much what it sounds like, meaning &amp;ldquo;how long did it take to submit this IO to the kernel for processing?&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slat (usec): min=3, max=335, avg= 9.73, stdev= 5.76
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t consider submission latency to be very useful. Before posting this I wanted to make sure it isn&amp;rsquo;t a useful metric so I ran a thrashing load across 4 drives to see if it matters to anybody but kernel devs. Nope. The worst latency at 269us is negligible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slat (usec): min=5, max=68,  avg=26.21, stdev= 5.97 (SAS 7200)
slat (usec): min=5, max=63,  avg=25.86, stdev= 6.12 (SATA 7200)
slat (usec): min=3, max=269, avg= 9.78, stdev= 2.85 (SATA SSD)
slat (usec): min=6, max=66,  avg=27.74, stdev= 6.12 (MDRAID0/SAS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next metric is completion latency. This is the time that passes between submission to the kernel and when the IO is complete, not including submission latency.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clat (usec): min=1, max=18600, avg=51.29, stdev=16.79
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From what I can tell, the &amp;lsquo;lat&amp;rsquo; metric is fairly new. It&amp;rsquo;s not documented in the man page or docs. Looking at the C code, it seems that this metric includes all of the time from when fio creates its IO tracking struct to when the IO call returns as complete to fio, so this is really the metric that best represents what applications can expect.
     lat (usec): min=44, max=18627, avg=61.33, stdev=17.91&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clat percentiles (usec):
 |  1.00th=[   42],  5.00th=[   45], 10.00th=[   45], 20.00th=[   46],
 | 30.00th=[   47], 40.00th=[   47], 50.00th=[   49], 60.00th=[   51],
 | 70.00th=[   53], 80.00th=[   56], 90.00th=[   60], 95.00th=[   67],
 | 99.00th=[   78], 99.50th=[   81], 99.90th=[   94], 99.95th=[  101],
 | 99.99th=[  112]

bw (KB  /s): min=52536, max=75504, per=67.14%, avg=63316.81, stdev=4057.09

lat (usec) :   2= 0.01%,   4=0.01%,  10=0.01%,   20=0.01%, 50=51.41%
lat (usec) : 100=48.53%, 250=0.06%, 500=0.01%, 1000=0.01%
lat (msec) :   2= 0.01%,   4=0.01%,  10=0.01%,   20=0.01%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cpu          : usr=5.32%, sys=21.95%, ctx=2829095, majf=0, minf=21&lt;/p&gt;

&lt;p&gt;IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &amp;gt;=64=0.0%
     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &amp;gt;=64=0.0%
     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &amp;gt;=64=0.0%&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; issued    : total=r=2621440/w=0/d=0, short=r=0/w=0/d=0

 latency   : target=0, window=0, percentile=100.00%, depth=1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
