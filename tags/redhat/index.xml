<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
     xmlns:creativeCommons="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html"
     xmlns:cc="http://creativecommons.org/ns#"
     xmlns:xapRights="http://ns.adobe.com/xap/1.0/rights/">
  <channel>
    <title>Redhat on @AlTobey Writes </title>
    <link>https://tobert.github.io/tags/redhat/index.xml</link>
    <language>en-us</language>
    <author>Albert P Tobey</author>
	<pubDate>2008-04-06 18:50:00 -0700 PDT</pubDate>
	<lastBuildDate>2008-04-06 18:50:00 -0700 PDT</lastBuildDate>
	<generator>Hugo</generator>
    
    <item>
      <title>Virtualization Madness</title>
      <link>https://tobert.github.io/post/2008-04-06-virtualization-madness</link>
      <pubDate>Sun, 06 Apr 2008 18:50:00 PDT</pubDate>
      <author>Albert P Tobey</author>
      <guid>https://tobert.github.io/post/2008-04-06-virtualization-madness</guid>
      <description>&lt;div class=&#34;css-full-post-content js-full-post-content&#34;&gt;
I now have all of my hardware for the virtualization project I&#39;ve been working on and have been doing final testing and setup configuration lately.  I&#39;ve had the awesome opportunity to really torture the VM setup on a test cluster in the lab.   I started out with testing storage solutions on a 10x10 (physical x virtual) cluster of Dell 1950&#39;s with 8GB of RAM and two Core 2 Duo&#39;s.   I still have the demo NetApp 3070 that proved out NFS storage for VM images, and now I have all of the upgrades in the 1950&#39;s to push them to 32GB of RAM and hardware RAID controllers.    I&#39;ve learned quite a bit in the process of all of this testing and thought I&#39;d share some tips here.&lt;br /&gt;&lt;br /&gt;Many of the VM&#39;s I&#39;ll be running in production will come from a P2V migration, but because my predecessors were smart enough to concentrate all of our custom content under a single mountpoint,   most of the systems can be migrated to new OS images (and thus upgrade ancient OS&#39;s in the process).&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Tip #1&lt;/span&gt;: when building servers (physical or virtual), ignore the &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard&#34;&gt;FHS&lt;/a&gt;&lt;/span&gt; for your local content.  The common place these days is /srv, so put anything that does not come in a distribution package here. Backups are as easy as &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;tar -czvf /someplace/`hostname -s`-srv.tar.gz /srv&lt;/span&gt;&lt;/span&gt;&#34;.  Migrations and cluster scaleouts similarly easy: &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;rsync -ave ssh /srv/./ username@newbox:/srv&lt;/span&gt;&lt;/span&gt;&#34;.   When a package really wants you to conform to FHS, work around it with symlinks.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Edit:&lt;/span&gt; &lt;span style=&#34;font-style: italic;&#34;&gt;it was pointed out to me that FHS actually recommends /srv.  To be honest, I haven&#39;t looked at it in years.    In any case, my point remains valid, since most distros interpret FHS in their own way and still put things like web content and database files under /var.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Ok, so that wasn&#39;t so much about virtualization.   A somewhat little known fact is that almost all of the virtualization players out there, be it Xen, KVM, VMWare, or even Microsoft, is that the VM&#39;s themselves are not actually that hard to migrate between them.   You only have to figure it out once then, especially for Linux VM&#39;s, you can script it and do them in bulk.   Probably the two most valuable tools for this are kpartx and qemu-img.    Xen doesn&#39;t seem to install qemu-img with its Qemu stuff, but it&#39;s well-worth keeping around on your dom0&#39;s.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Tip #2&lt;/span&gt;: learn to use kpartx and qemu-img, even if you&#39;re using LVM or individual LUN&#39;s for your VM&#39;s.    qemu-img can read and write raw, vmdisk, qcow2, and a few other formats and is pretty deft at enabling &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Sparse_file&#34;&gt;sparse file&lt;/a&gt;&lt;/span&gt; support, which is pretty nifty.   For instance, if you download a VMWare appliance and want to run it under Xen, it&#39;s trivial to convert to a raw image with &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;qemu-img convert vmappliance.img -O raw vmappliance-raw.img&lt;/span&gt;&lt;/span&gt;&#34;.    kpartx is nice because it will map out partitions within an image or LVM volume using device mapper.    So once that image is created, do &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;kpartx -va vmappliance-raw.img&lt;/span&gt;&lt;/span&gt;&#34; then you can mount the partitions without messing around with weird offset options to losetup.&lt;br /&gt;&lt;br /&gt;One of the problems I&#39;ve run into quite a lot over the last couple years&#39; of playing with Xen &amp;amp; co. is that most initramfs scripts output far too fragile and stupid environments.     With the availability of busybox and gobs of RAM these days, there is absolutely no reason I should have to screw around for hours rebooting a box because these filesystems are not smart enough to drop into a debug shell when things go wrong.     I have published a simplistic script that I occasionally use to build initrd&#39;s at &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://tobert.org/unix/index.html&#34;&gt;http://tobert.org/unix/index.html&lt;/a&gt;&lt;/span&gt;.   But often, for support reasons, it&#39;s not practical to run a custom generation script.   With the 2.6 Linux kernel, it&#39;s actually way easier to edit these buggers than it was back in the day, since now they&#39;re simply compressed cpio archives.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Tip #3&lt;/span&gt;: learn how to hack initrd&#39;s and get those years of your life back.   Here&#39;s how to tear it apart: &lt;pre style=&#34;font-family: courier new; font-size: 85%;&#34;&gt;mkdir /tmp/initrd&lt;br /&gt;cd /tmp/initrd&lt;br /&gt;gunzip -c /boot/initrd-`uname -r`.img |cpio -ivdm&lt;/pre&gt;The first thing to look at is the &#34;init&#34; script.   For instance, when CLVM locking is stopping you from getting to single-user, simply crack that file open and comment out all the LVM initialization code.    It&#39;s mostly a simple shell script.   Another trick is to copy busybox into the bin directory, symlink lash, then add a &#34;/bin/lash -i&#34; to the init script right before root gets mounted.    To put everything together again, you have to use the &#34;newc&#34; cpio format, so the command is (from the top of the initrd):&lt;br /&gt;&lt;pre style=&#34;font-family: courier new; font-size: 85%;&#34;&gt;find . |cpio -oH newc |gzip -c &gt; /boot/initrd-`uname -r`.img&lt;/pre&gt; To save yourself a lot of frustration, I highly recommend playing around with initramfs hacking in VM&#39;s first, since the hack/reboot/fail/reboot/hack/reboot cycle is so much faster.&lt;br /&gt;&lt;br /&gt;Xen is pretty neat and it&#39;s nice how it&#39;s integrated with EL5 so I can just use yum to keep up to date.   While I&#39;m deploying Xen for my production stuff in the coming weeks, I&#39;m watching closely for KVM to reach a level of maturity where I can start migrating over to it.   I expect this to happen this year, but I won&#39;t go anywhere near it for production until it starts surviving my torture tests (another post, another day).  For some more eloquent writing about why KVM can be better, check out &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://udrepper.livejournal.com/&#34;&gt;Ulrich Drepper&#39;s LiveJournal&lt;/a&gt;&lt;/span&gt;, specifically &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://udrepper.livejournal.com/15795.html&#34;&gt;here&lt;/a&gt;&lt;/span&gt; and &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://udrepper.livejournal.com/17577.html&#34;&gt;here&lt;/a&gt;&lt;/span&gt;.   So, what can you do to keep your VM&#39;s easy to migrate when something better comes along?   Tip #1 takes you a long ways, since even if you have to reinstall the OS, it&#39;s a pretty trivial operation (especially if you use &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://cobbler.et.redhat.com/&#34;&gt;Cobbler&lt;/a&gt;&lt;/span&gt;).&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Tip #4&lt;/span&gt;: don&#39;t tie your VM&#39;s too tightly to one solution.    Obviously, the first step is to use &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://libvirt.org/&#34;&gt;libvirt&lt;/a&gt;&lt;/span&gt; rather than XenAPI.   Once I figured out all of the bits &amp;amp; pieces, it only took about an hour - mostly waiting for the damned computers - to get all my test VM&#39;s converted from Xen to KVM paravirt.    kpartx was invaluable since it let me mount the VM filesystems from the host.   All of my VM&#39;s are on NetApp NFS, so a simple shell loop made quick work of mounting all 100 filesystems in my test cluster.&lt;pre style=&#34;font-family: courier new; font-size: 85%;&#34;&gt;cd /net/vm-disks&lt;br /&gt;for vmdisk in *.img&lt;br /&gt;do&lt;br /&gt; mkdir -p /mnt/$vmdisk&lt;br /&gt; # run kpartx and grab partition #1 all at once&lt;br /&gt; DEVICE=`kpartx -v -a /net/vm-disks/$vmdisk |head -n 1 \&lt;br /&gt;          |awk &#39;{print $3}&#39;`&lt;br /&gt; mount /dev/mapper/$DEV /mnt/$vmdisk&lt;br /&gt;done&lt;/pre&gt;Once they&#39;re all mounted, it&#39;s pretty easy to loop through all of them and make a change, such as copy in a new /etc/modprobe.conf or an updated initramfs with virtio network/block drivers.  I&#39;m especially excited about KVM virtio-net with NFS root, since virtio-net is shaping up to be quite a bit faster than xennet.&lt;pre style=&#34;font-family: courier new; font-size: 85%;&#34;&gt;# install a normal kernel&lt;br /&gt;cd /mnt&lt;br /&gt;for vmdisk in *.img&lt;br /&gt;do&lt;br /&gt; chroot /mnt/$vmdisk yum -y install kernel&lt;br /&gt;done&lt;br /&gt;# and so on ...&lt;/pre&gt;You might even get away with some of these tricks on Windows VM&#39;s using ntfstools and ntfs-3g.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Tip #5&lt;/span&gt;: when searching for best practices and tuning information, there is a lot of excellent documentation available for us Xen and KVM users in the form of VMWare documentation.  For example, I&#39;ve had really good luck with reading NetApp&#39;s docs for NetApp + VMWare (the block alignment and Oracle RAC on NFS docs are particularly good).    When vendors say &#34;we really don&#39;t do much with Xen,&#34; I ask them for VMWare whitepapers instead.    Most of the concepts are the same regardless of the hypervisor, so learn both sets of terminology and make the best of all the great documentation out there.&lt;br /&gt;&lt;br /&gt;As always, remember to make backups ...
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Xen Networking</title>
      <link>https://tobert.github.io/post/2007-09-07-xen-networking</link>
      <pubDate>Fri, 07 Sep 2007 15:18:00 PDT</pubDate>
      <author>Albert P Tobey</author>
      <guid>https://tobert.github.io/post/2007-09-07-xen-networking</guid>
      <description>&lt;div class=&#34;css-full-post-content js-full-post-content&#34;&gt;
&lt;span style=&#34;font-family:trebuchet ms;&#34;&gt;&lt;/span&gt;I&#39;ve been working on evaluating Xen for all the reasons most companies look into virtualization.      One of the most confusing parts of Xen to learn is the way it does networking.   This is because the Xen team has devised a default configuration that is quite flexible, but also takes some time to get used to.   I&#39;m not even going to talk about that, because I think there&#39;s  a better way.&lt;br /&gt;&lt;br /&gt;This is a description of how to set up networking for Xen on CentOS 5.0 using 802.1q VLAN trunking with a bridge on dom0 for each VLAN.   In my setup, eth0 is dedicated to dom0 tasks like live migration, iSCSI, and console access.    eth1 is dedicated as a VLAN trunk.   NO VLAN interfaces are configured with addresses in dom0, which should help reduce security implications.&lt;br /&gt;&lt;br /&gt;Files:&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  DEVICE=eth0&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;BOOTPROTO=static&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;BROADCAST=192.168.1.255&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;HWADDR=00:19:D1:4D:CD:D1&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;IPADDR=192.168.1.25&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;NETMASK=255.255.255.0&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;NETWORK=192.168.1.0&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ONBOOT=yes&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;/etc/sysconfig/network-scripts/ifcfg-eth1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;DEVICE=eth1&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;HWADDR=00:19:D1:4D:CD:D2&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ONBOOT=yes&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;# note, no address configured&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;/etc/sysconfig/network-scripts/ifcfg-eth1.4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;DEVICE=eth1.4&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;BOOTPROTO=static&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ONBOOT=yes&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;VLAN=yes&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;BRIDGE=br4&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;# again, no address configured&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;/etc/sysconfig/network-scripts/ifcfg-br4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;DEVICE=br4&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;TYPE=Bridge&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;BOOTPROTO=static&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ONBOOT=yes&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;DELAY=0&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;STP=off&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The files above only demonstrate the standard way to configure 802.1q VLAN&#39;s and bridges under modern Redhat-derivative distributions like RHEL, CentOS, and Fedora.  The nice part is, we&#39;re almost done.    Only a small change is necessary in Xen, so that it no longer brings up xenbr0.  I don&#39;t want to pay for the overhead of networking through a bridge for my iSCSI, even if it is a very small cost.&lt;br /&gt;&lt;br /&gt;Modify &lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;/etc/xen/xend-config.sxp&lt;/span&gt;&lt;/span&gt; and change &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;(network-script ...)&lt;/span&gt;&lt;/span&gt;&#34; to &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;(network-script /bin/true)&lt;/span&gt;&lt;/span&gt;&#34;.    Comment the &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;(vif-script ...)&lt;/span&gt;&lt;/span&gt;&#34; line(s) out completely.   You don&#39;t need them anymore.&lt;br /&gt;&lt;br /&gt;Reboot dom0.&lt;br /&gt;&lt;br /&gt;When the box comes back up, log in and look around at your networking configuration.  Use &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ifconfig&lt;/span&gt;&lt;/span&gt;&#34; or &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;ip link show&lt;/span&gt;&lt;/span&gt;&#34;, &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;brctl&lt;/span&gt;&lt;/span&gt;&#34;, and &#34;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;cat /proc/net/vlan/config&lt;/span&gt;&lt;/span&gt;&#34;.&lt;br /&gt;&lt;br /&gt;Modify your VM configurations to point at the correct bridges.   Something like the following should work fine.&lt;br /&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;pre&gt;    vif = [ &#39;mac=00:16:3e:01:fb:fe, bridge=br4&#39; ]&lt;/pre&gt;&lt;/span&gt;&lt;/span&gt;xend will still create the point-to-point (vif) interfaces and connect them to the bridge for you.   It doesn&#39;t need the helper scripts because the bridges are already all set up and ready to have interfaces bound to them.&lt;br /&gt;&lt;br /&gt;This is currently a bit outside the beaten path for Xen netw0rking, so you get to keep all the pieces if it breaks things, has an affair with your refrigerator, or any other such sideeffects.    If you have questions, leave comments on this post and I&#39;ll try to answer.&lt;br /&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;span style=&#34;font-family:courier new;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;css-full-comments-content js-full-comments-content&#34;&gt;
&lt;div class=&#34;css-full-comment js-full-comment&#34;&gt;
  &lt;div class=&#34;css-comment-user-link js-comment-user-link&#34;&gt;
  &lt;a href=&#34;undefined&#34;&gt;
  &lt;div class=&#34;css-comment-name js-comment-name&#34;&gt;
    Niels Wijnja
  &lt;/div&gt;
  &lt;/a&gt;
  &lt;div class=&#34;css-comment-date js-comment-date&#34;&gt;
    2007-09-24T21:54:00.000Z
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;css-comment-content js-comment-content&#34;&gt;
    Very useful information, thanks for that :)
  &lt;/div&gt;
  &lt;br/&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>here-is-drop-in-replacement-for-rajeev</title>
      <link>https://tobert.github.io/post/2003-12-02-here-is-drop-in-replacement-for-rajeev</link>
      <pubDate>Tue, 02 Dec 2003 17:00:00 -0700</pubDate>
      <author>Albert P Tobey</author>
      <guid>https://tobert.github.io/post/2003-12-02-here-is-drop-in-replacement-for-rajeev</guid>
      <description>&lt;div class=&#34;css-full-post-content js-full-post-content&#34;&gt;
Here is a drop-in replacement for Rajeev Kumar&#39;s bootprofile, written in (bourne|korn|posix) shell. Everything required [on my rh9/rawhide laptop] is in /bin or /sbin. It&#39;s nice when you like to put everything on separate LVM volumes like I do. Here it is: &lt;a href=&#34;http://tobert.googlepages.com/bootprofile.sh&#34;&gt;bootprofile.sh&lt;/a&gt;. View now: &lt;a href=&#34;http://tobert.googlepages.com/bootprofile.sh.txt&#34;&gt;bootprofile.sh.txt&lt;/a&gt;. Last update: December 02, 2003.&lt;br /&gt;&lt;a href=&#34;http://tobert.googlepages.com/bootprofile-sc.jpg&#34;&gt;Screenshot (46k)&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
